// ðŸ“Œ Rule 1: Detect Mirai-Based IoT Malware
rule IoT_Mirai_Botnet {
    strings:
        $mirai1 = "dvrHelper"
        $mirai2 = "LightAidra"
        $mirai3 = "/bin/busybox"
        $mirai4 = "MIRAI"
        $mirai5 = "telnetd"
        $mirai6 = "echo -ne '\\x"

    condition:
        any of them
}

// ðŸ“Œ Rule 2: Detect Gafgyt (Bashlite) IoT Malware
rule IoT_Gafgyt_Botnet {
    strings:
        $gafgyt1 = "BusyBox"
        $gafgyt2 = "/proc/cpuinfo"
        $gafgyt3 = "/dev/watchdog"
        $gafgyt4 = "wget http"
        $gafgyt5 = "tftp -g"
        $gafgyt6 = "cd /tmp; rm -rf"

    condition:
        any of them
}

// ðŸ“Œ Rule 3: Detect Mozi IoT Botnet
rule IoT_Mozi_Botnet {
    strings:
        $mozi1 = "echo -ne"
        $mozi2 = "chmod 777 /tmp/"
        $mozi3 = "dnsmasq"
        $mozi4 = "udp_flood"
        $mozi5 = "tftp -g -r"
        $mozi6 = "randomize_targets"

    condition:
        any of them
}

// ðŸ“Œ Rule 4: Detect IoT Metasploit Payloads
rule IoT_Metasploit_Payload {
    strings:
        $msf1 = "stage1.bin"
        $msf2 = "METERPRETER"
        $msf3 = "/dev/meterpreter"
        $msf4 = "chmod +x /tmp/"
        $msf5 = "nc -e /bin/sh"
        $msf6 = "bash -i >& /dev/tcp/"

    condition:
        any of them
}

// ðŸ“Œ Rule 5: Detect IoT Reverse Shells (Common Exploits)
rule IoT_Reverse_Shell {
    strings:
        $rev1 = "/bin/sh -c"
        $rev2 = "nc -lvp"
        $rev3 = "/dev/tcp/"
        $rev4 = "system(\"bash"
        $rev5 = "open(\"/dev/tcp/"

    condition:
        any of them
}

// ðŸ“Œ Rule 6: Detect Windows Remote Access Trojans (RATs)
rule Windows_Trojan {
    strings:
        $trojan1 = "kernel32.dll"
        $trojan2 = "VirtualAlloc"
        $trojan3 = "CreateRemoteThread"
        $trojan4 = "LoadLibraryA"
        $trojan5 = "InternetOpenA"

    condition:
        3 of them
}

// ðŸ“Œ Rule 7: Detect Metasploit Windows Payload (EXE)
rule Metasploit_Windows_Payload {
    strings:
        $msf1 = "This program cannot be run in DOS mode"
        $msf2 = "reflectiveLoader"
        $msf3 = "ws2_32.dll"
        $msf4 = "WinExec"

    condition:
        any of them
}

// ðŸ“Œ Rule 8: Detect Android Malware (Suspicious APKs)
rule Android_Malware {
    strings:
        $apk1 = "classes.dex"
        $perm1 = "android.permission.INTERNET"
        $perm2 = "android.permission.READ_SMS"
        $perm3 = "android.permission.RECEIVE_BOOT_COMPLETED"

    condition:
        all of them
}

// ðŸ“Œ Rule 9: Detect Metasploit Android Payload (Backdoor APKs)
rule Metasploit_Android_Payload {
    strings:
        $apk1 = "classes.dex"
        $apk2 = "android.permission.INTERNET"
        $apk3 = "android.permission.READ_SMS"
        $apk4 = "Ldalvik/system/DexClassLoader;"
        $apk5 = "Lcom/metasploit/stage/Payload;"

    condition:
        all of them
}
